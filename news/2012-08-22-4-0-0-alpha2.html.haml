---
layout: news-item
title: 'Netty 4.0.0.Alpha2 released'
author: trustin
disqus_identifier: 2184042425090084197
---

:plain
  <div class="entry-content">
  <p>Thanks to all the feed back we received since 4.0.0.Alpha1, we were able to release another round of alpha version of Netty 4.0.0.  Get it <span class="wikilink"><a href="http://netty.io/downloads.html">here</a></span>, and the following is the notable changes since Alpha1 (If you want the exhaustive list of the changes, visit <span class="wikiexternallink"><a href="https://github.com/netty/netty/issues?milestone=21&amp;state=closed">the issue tracker</a></span>.  If you are curious about what's new since 3.x, read <span class="wikilink"><a href="http://netty.io/wiki/new-and-noteworthy.html">New &amp; Noteworthy</a></span>):</p>
  <h3 id="HEventLoopissplitintoEventLoopGroupandEventLoop"><span><tt>EventLoop</tt> is split into <tt>EventLoopGroup</tt> and <tt>EventLoop</tt></span></h3>
  <p>In Alpha1, <tt>EventLoop</tt> represented both an individual I/O thread and a pool of those threads.  I must admit it was somewhat confusing in some cases.  From Alpha2, <tt>EventLoopGroup</tt> represents a group of one or more <tt>EventLoop</tt>s, and <tt>EventLoop</tt> represents a single I/O thread.</p>
  <p>Because of this change, your bootstrap code needs the following change:</p>
  <script src="https://gist.github.com/3424833.js"></script><h3 id="HReadsuspensionimplemented2Cwaybetter"><span>Read suspension implemented, way better</span></h3>
  <p>One of the missing features in Alpha1 comparing to 3.x was read suspension, but it's now back with more sensible way of inbound traffic suspension.</p>
  <p>3.x had an unintuitive inbound traffic suspension mechanism provided by <tt>Channel.setReadable(boolean)</tt>.  It introduced complicated interactions between <tt>ChannelHandler</tt>s and the handlers were easy to interfere with each other if implemented incorrectly.</p>
  <p>In 4.0, each <tt>ChannelHandler</tt> is given with its own boolean flag called '<tt>readable</tt>' in its <tt>ChannelHandlerContext</tt>.  The flag tells if the handler wants Netty to read inbound traffic or not.  It works like a consensus system.  If any of the boolean flags in the pipeline is set to false, Netty will suspend read operation.  If all of the boolean flags in the pipeline are set to true, Netty will resume read operation.</p>
  <h3 id="HChannelFutureimplementsFuture3CVoid3E"><span><tt>ChannelFuture</tt> implements <tt>Future&lt;Void&gt;</tt></span></h3>
  <p><tt>ChannelFuture</tt> now implements <tt>java.util.concurrent.Future&lt;Void&gt;</tt>.</p>
  <h3 id="HHttpMessage.chunkedisgone21"><span>HttpMessage.chunked is gone!</span></h3>
  <p><tt>HttpMessage.chunked</tt> property has been replaced by a new property called '<tt>transferEncoding</tt>' to address the ambiguity of the old property. The '<tt>chunked</tt>' property, in spite of its confusing name, was not necessarily related with HTTP chunked transfer coding, but it just meant to represent an <tt>HttpMessage</tt> which is followed by <tt>HttpChunk</tt>s.  For more information, refer to the API documentation of <span class="wikiexternallink"><a href="http://netty.io/4.0/api/index.html?io/netty/handler/codec/http/HttpTransferEncoding.html"><tt>HttpTransferEncoding</tt></a></span>.</p>
  <h3 id="HWantmorechanges3FIt27suptoyou21"><span>Want more changes? It's up to you!</span></h3>
  <p>Netty 4 is still at alpha stage - there are so many opportunities where your constructive feed back will make Netty 4 better than ever.  Let me look forward to <span class="wikiexternallink"><a href="https://groups.google.com/forum/#%21forum/netty">your joining the developer group</a></span> and letting people know what you think.</p>
  </div>
