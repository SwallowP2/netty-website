---
layout: news-item
title: 'WebSocket Enhancement'
author: danbev
disqus_identifier: 3060860479470210279
---

:plain
  <h1></h1><div class="entry-content">
  <div><p>Netty has had WebSocket support for quite a while now, and it is easy to get up an running quickly with the existing examples. The <span class="wikiexternallink"><a title="Original WebSocket Example" href="https://github.com/netty/netty/blob/master/example/src/main/java/io/netty/example/http/websocketx/server/WebSocketServerHandler.java">example</a></span> provided with Netty, consists of a handler which takes care of the HTTP Upgrade handshake, and also manages the WebSocket protocol. If you need to service http requests, for example serving static files, in addition to WebSocket calls then this approach works great.  </p></div>
  <div></div>
  <div><p>But if all you want to do is create a custom application protocol on top of WebSocket and only service WebSocket requests, then the above solution is a fair amount of code that you'll have to maintain yourself. So, we set out to try to simplify this and this post describes what we came up with.</p></div>
  <div><h3 id="HHandlingaTextSocketFrame"><span>Handling a TextSocketFrame</span></h3></div>
  <div><p>Below is an example of implementing a handler that will receive a <span class="wikiexternallink"><a href="https://github.com/netty/netty/blob/master/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/TextWebSocketFrame.java">TextWebSocketFrame</a></span> :</p></div>
  <div><script src="https://gist.github.com/4076875.js"></script></div>
  <div><p>The text content is retrieved by calling <em>getText,</em> and can then be parsed as required by the application protocol. This might involve parsing the String as JSON or whatever the protocol in question dictates. </p></div>
  <div>
  <div style="font-family: Ubuntu, 'Liberation Sans', 'Droid Sans', Helvetica, sans-serif; font-size: 14px; font-style: normal; text-align: start; "><h3 id="HBootstrappingNetty"><span><span style="font-size: 20px; ">Bootstrapping Netty</span></span></h3></div>
  <div style="font-family: Ubuntu, 'Liberation Sans', 'Droid Sans', Helvetica, sans-serif; font-size: 14px; font-style: normal; text-align: start; "></div>
  </div>
  <div><p>Now, lets take a look at what is needed to bootstrap Netty:</p></div>
  <div><script src="https://gist.github.com/4076911.js"></script></div>
  <div>
  <p>As you can see the <em>CustomTextFrameHandler</em> from the previous code example is the last handler added, and right before it, we have a new handler named <span class="wikiexternallink"><a href="https://github.com/netty/netty/blob/master/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerProtocolHandler.java">WebSocketServerProtocolHandler</a></span>.</p>
  <p>An <span class="wikiexternallink"><a title="WebSocket HTML5 example" href="https://github.com/netty/netty/tree/master/example/src/main/java/io/netty/example/http/websocketx/html5">example</a></span> has been included in Netty which uses the above code for the server side, and a simple html page as the WebSocket client.</p>
  </div>
  <div><h3 id="HNetty3.xSupport"><span>Netty 3.x Support</span></h3></div>
  <div><p>This feature has also been back-ported to Netty 3.x. The <em>CustomTextFrameHandler</em> class would then look something like this:</p></div>
  <div><script src="https://gist.github.com/4076940.js"></script></div>
  <div><p><span style="font-family: Ubuntu, 'Liberation Sans', 'Droid Sans', Helvetica, sans-serif; font-size: 14px; font-style: normal; line-height: 19.600000381469727px; text-align: start;">An <span class="wikiexternallink"><a title="WebSocket Example for 3.x" href="https://github.com/netty/netty/tree/3/src/main/java/org/jboss/netty/example/http/websocketx/html5">example</a></span> has been included in Netty which uses the above code for the server side, and a simple html page as the WebSocket client.</span></p></div>
  </div>
